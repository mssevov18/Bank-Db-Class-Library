// <auto-generated />
using System;
using Bank_Db_Class_Library;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bank_Db_Class_Library.Migrations
{
    [DbContext(typeof(Bank_DatabaseContext))]
    [Migration("20220621084529_AddSoftDelete")]
    partial class AddSoftDelete
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bank_Db_Class_Library.Account", b =>
                {
                    b.Property<string>("AccountIban")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("account_iban");

                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("account_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance")
                        .HasColumnType("money")
                        .HasColumnName("balance");

                    b.Property<int>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("bank_id");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("password");

                    b.Property<string>("PersonEgn")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("person_egn")
                        .HasDefaultValueSql("('0000000000')")
                        .IsFixedLength(true);

                    b.HasKey("AccountIban")
                        .HasName("PK_Account_IBAN");

                    b.HasIndex("BankId");

                    b.HasIndex("PersonEgn");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Bank_Db_Class_Library.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("bank_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("('empty')");

                    b.HasKey("BankId");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("Bank_Db_Class_Library.BankWorker", b =>
                {
                    b.Property<int>("WorkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("worker_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("bank_id");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("is_admin");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("password");

                    b.Property<string>("PersonEgn")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("person_egn")
                        .HasDefaultValueSql("('0000000000')")
                        .IsFixedLength(true);

                    b.Property<decimal>("Salary")
                        .HasColumnType("money")
                        .HasColumnName("salary");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("username");

                    b.HasKey("WorkerId");

                    b.HasIndex("BankId");

                    b.HasIndex("PersonEgn");

                    b.HasIndex(new[] { "Username" }, "IX_Bank_Worker_Username")
                        .IsUnique();

                    b.ToTable("Bank_Worker");
                });

            modelBuilder.Entity("Bank_Db_Class_Library.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("branch_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("address")
                        .HasDefaultValueSql("('empty')");

                    b.Property<int>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("bank_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("BranchId");

                    b.HasIndex("BankId");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("Bank_Db_Class_Library.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("card_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountHolderIban")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("account_holder_iban");

                    b.Property<string>("CardNum")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("nchar(16)")
                        .HasColumnName("card_num")
                        .HasDefaultValueSql("('0000000000000000')")
                        .IsFixedLength(true);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ExpirationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("expiration_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("HolderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("holder_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4)
                        .HasColumnType("nchar(4)")
                        .HasColumnName("pin")
                        .HasDefaultValueSql("('0000')")
                        .IsFixedLength(true);

                    b.Property<string>("SecurityNum")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .HasColumnName("security_num")
                        .HasDefaultValueSql("('000')")
                        .IsFixedLength(true);

                    b.HasKey("CardId");

                    b.HasIndex("AccountHolderIban");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("Bank_Db_Class_Library.CardReader", b =>
                {
                    b.Property<int>("ReaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reader_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountRecieverIban")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("account_reciever_iban")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("bank_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ReaderId");

                    b.HasIndex("AccountRecieverIban");

                    b.HasIndex("BankId");

                    b.ToTable("Card_Reader");
                });

            modelBuilder.Entity("Bank_Db_Class_Library.GetAccountDatum", b =>
                {
                    b.Property<string>("AccountFullName")
                        .IsRequired()
                        .HasMaxLength(152)
                        .HasColumnType("nvarchar(152)")
                        .HasColumnName("Account Full Name");

                    b.Property<decimal>("Balance")
                        .HasColumnType("money");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Bank Name");

                    b.Property<int?>("CardAmount")
                        .HasColumnType("int")
                        .HasColumnName("Card Amount");

                    b.ToView("GetAccountData");
                });

            modelBuilder.Entity("Bank_Db_Class_Library.GetBankWorkerDatum", b =>
                {
                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Bank Name");

                    b.Property<string>("WorkerFullName")
                        .IsRequired()
                        .HasMaxLength(152)
                        .HasColumnType("nvarchar(152)")
                        .HasColumnName("Worker Full Name");

                    b.ToView("GetBankWorkerData");
                });

            modelBuilder.Entity("Bank_Db_Class_Library.GetBranchDatum", b =>
                {
                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Bank Name");

                    b.Property<string>("BranchAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Branch Address");

                    b.ToView("GetBranchData");
                });

            modelBuilder.Entity("Bank_Db_Class_Library.Person", b =>
                {
                    b.Property<string>("Egn")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("egn")
                        .IsFixedLength(true);

                    b.Property<DateTime>("BirthDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("birth_day")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("middle_name");

                    b.Property<string>("Residence")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("residence");

                    b.HasKey("Egn");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Bank_Db_Class_Library.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("request_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Arguments")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("arguments");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSuccessful")
                        .HasColumnType("bit")
                        .HasColumnName("is_successful");

                    b.Property<string>("Requester")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("requester")
                        .HasDefaultValueSql("('n')");

                    b.Property<string>("TableAffected")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("table_affected")
                        .HasDefaultValueSql("('none')");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("WillDelete")
                        .HasColumnType("bit")
                        .HasColumnName("will_delete");

                    b.HasKey("RequestId");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("Bank_Db_Class_Library.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("transaction_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money")
                        .HasColumnName("amount");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("TransactionId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Bank_Db_Class_Library.TransactionAccountConnection", b =>
                {
                    b.Property<int>("ConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("connection_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountRecieverIban")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("account_reciever_iban");

                    b.Property<string>("AccountSenderIban")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("account_sender_iban");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("transaction_id");

                    b.HasKey("ConnectionId");

                    b.HasIndex("AccountRecieverIban");

                    b.HasIndex("AccountSenderIban");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionAccountConnection");
                });

            modelBuilder.Entity("Bank_Db_Class_Library.Account", b =>
                {
                    b.HasOne("Bank_Db_Class_Library.Bank", "Bank")
                        .WithMany("Accounts")
                        .HasForeignKey("BankId")
                        .HasConstraintName("FK_Account_Bank")
                        .IsRequired();

                    b.HasOne("Bank_Db_Class_Library.Person", "PersonEgnNavigation")
                        .WithMany("Accounts")
                        .HasForeignKey("PersonEgn")
                        .HasConstraintName("FK_Account_Person")
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("PersonEgnNavigation");
                });

            modelBuilder.Entity("Bank_Db_Class_Library.BankWorker", b =>
                {
                    b.HasOne("Bank_Db_Class_Library.Bank", "Bank")
                        .WithMany("BankWorkers")
                        .HasForeignKey("BankId")
                        .HasConstraintName("FK_Bank_Worker_Bank")
                        .IsRequired();

                    b.HasOne("Bank_Db_Class_Library.Person", "PersonEgnNavigation")
                        .WithMany("BankWorkers")
                        .HasForeignKey("PersonEgn")
                        .HasConstraintName("FK_Bank_Worker_Person")
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("PersonEgnNavigation");
                });

            modelBuilder.Entity("Bank_Db_Class_Library.Branch", b =>
                {
                    b.HasOne("Bank_Db_Class_Library.Bank", "Bank")
                        .WithMany("Branches")
                        .HasForeignKey("BankId")
                        .HasConstraintName("FK_Branch_Bank")
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("Bank_Db_Class_Library.Card", b =>
                {
                    b.HasOne("Bank_Db_Class_Library.Account", "AccountHolderIbanNavigation")
                        .WithMany("Cards")
                        .HasForeignKey("AccountHolderIban")
                        .HasConstraintName("FK_Card_Account")
                        .IsRequired();

                    b.Navigation("AccountHolderIbanNavigation");
                });

            modelBuilder.Entity("Bank_Db_Class_Library.CardReader", b =>
                {
                    b.HasOne("Bank_Db_Class_Library.Account", "AccountRecieverIbanNavigation")
                        .WithMany("CardReaders")
                        .HasForeignKey("AccountRecieverIban")
                        .HasConstraintName("FK_Card_Reader_Account")
                        .IsRequired();

                    b.HasOne("Bank_Db_Class_Library.Bank", "Bank")
                        .WithMany("CardReaders")
                        .HasForeignKey("BankId")
                        .HasConstraintName("FK_Card_Reader_Bank")
                        .IsRequired();

                    b.Navigation("AccountRecieverIbanNavigation");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("Bank_Db_Class_Library.TransactionAccountConnection", b =>
                {
                    b.HasOne("Bank_Db_Class_Library.Account", "AccountRecieverIbanNavigation")
                        .WithMany("TransactionAccountConnectionAccountRecieverIbanNavigations")
                        .HasForeignKey("AccountRecieverIban")
                        .HasConstraintName("FK_TransactionAccountConnection_Account1")
                        .IsRequired();

                    b.HasOne("Bank_Db_Class_Library.Account", "AccountSenderIbanNavigation")
                        .WithMany("TransactionAccountConnectionAccountSenderIbanNavigations")
                        .HasForeignKey("AccountSenderIban")
                        .HasConstraintName("FK_TransactionAccountConnection_Account")
                        .IsRequired();

                    b.HasOne("Bank_Db_Class_Library.Transaction", "Transaction")
                        .WithMany("TransactionAccountConnections")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("FK_TransactionAccountConnection_Transaction")
                        .IsRequired();

                    b.Navigation("AccountRecieverIbanNavigation");

                    b.Navigation("AccountSenderIbanNavigation");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Bank_Db_Class_Library.Account", b =>
                {
                    b.Navigation("CardReaders");

                    b.Navigation("Cards");

                    b.Navigation("TransactionAccountConnectionAccountRecieverIbanNavigations");

                    b.Navigation("TransactionAccountConnectionAccountSenderIbanNavigations");
                });

            modelBuilder.Entity("Bank_Db_Class_Library.Bank", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("BankWorkers");

                    b.Navigation("Branches");

                    b.Navigation("CardReaders");
                });

            modelBuilder.Entity("Bank_Db_Class_Library.Person", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("BankWorkers");
                });

            modelBuilder.Entity("Bank_Db_Class_Library.Transaction", b =>
                {
                    b.Navigation("TransactionAccountConnections");
                });
#pragma warning restore 612, 618
        }
    }
}
